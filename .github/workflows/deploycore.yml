
name: 'Deploy Core'

on:
  workflow_dispatch:
    inputs:
      targetEnvironment:
        description: 'Environment to Target'     
        required: true
        default: 'dev'

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    # environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Check Curl
      shell: bash
      run: |
        curl --version
        file $(which curl)

    # Login using az login and a service principal, allowing Terraform to access the account
    - name: Azure Login
      shell: pwsh
      run: |
        az login --service-principal -u $env:ARM_CLIENT_ID -p $env:ARM_CLIENT_SECRET --tenant $env:ARM_TENANT_ID
      env:
        ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}

    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup OpenTofu
      uses: opentofu/setup-opentofu@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Tofu Init
      run: tofu init -upgrade -backend-config="key=${{inputs.targetEnvironment}}.tfstate" -reconfigure
      working-directory: /home/runner/work/postyfox-core/postyfox-core/terraform
      env:
        ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}

    - name: Tofu Plan
      run: "tofu plan --var-file=./envs/${{inputs.targetEnvironment}}.tfvars"
      working-directory: /home/runner/work/postyfox-core/postyfox-core/terraform
      env:
        ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}

    - name: Tofu Apply
      run: "tofu apply -auto-approve --var-file=./envs/${{inputs.targetEnvironment}}.tfvars"
      working-directory: /home/runner/work/postyfox-core/postyfox-core/terraform
      env:
        ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}

    - name: Tofu Get Outputs
      id: tofu-output
      run: "tofu output -json"
      working-directory: /home/runner/work/postyfox-core/postyfox-core/terraform
      env:
        ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}      

  code:
    name: 'Code Build + Deploy'
    needs: [terraform]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download MS Key for apt-get
      run: curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
    
    - name: Add MS Key
      run: sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg

    - name: Add source
      run: sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-$(lsb_release -cs 2>/dev/null)-prod $(lsb_release -cs 2>/dev/null) main" > /etc/apt/sources.list.d/dotnetdev.list'

    - name: Refresh apt
      run: sudo apt-get update

    - name: Install Function App Core Tools
      run: sudo apt-get install azure-functions-core-tools-4 -y

    - name: Setup .NET Core 8.x
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Setup .NET Core (for inproc extensions)
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'      

    - name: Install dotnet Core dependencies
      run: dotnet restore
      working-directory: /home/runner/work/postyfox-core/postyfox-core/PostyFox-NetCore

    - name: Build dotnet Core Function App
      run: dotnet build -c Release
      working-directory: /home/runner/work/postyfox-core/postyfox-core/PostyFox-NetCore

    # Run the Func command to deploy, as this actually works for Flex Consumption Apps 

    - name: Upload the dotnet Function App
      shell: pwsh
      run: |
        func azure functionapp publish postyfox-func-app-dotnet-dev --csharp --nozip
      working-directory: /home/runner/work/postyfox-core/postyfox-core/PostyFox-NetCore

    - name: Build dotnet Posting Function App
      run: dotnet build -c Release
      working-directory: /home/runner/work/postyfox-core/postyfox-core/PostyFox-Posting

    - name: Setup Node v20
      uses: actions/setup-node@v4
      with:
        node-version: 20.x

    - name: npm install
      run: npm install 
      working-directory: /home/runner/work/postyfox-core/postyfox-core/PostyFox-TypeScript

    - name: npm build
      run: npm run build
      working-directory: /home/runner/work/postyfox-core/postyfox-core/PostyFox-TypeScript
